#ifndef _SHELL_H_
#define _SHELL_H_

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>

/* for read/write buffers */
#define READ_BUF_SIZE 1024
#define WRITE_BUF_SIZE 1024
#define BUF_FLUSH -1

/* For the function convert_number()*/
#define CONVERT_LOWERCASE	1
#define CONVERT_UNSIGNED	2

/**
 * struct list_s - the singly linked list structure
 * @str: a string data stored in the node
 * @next: a pointer to the next node in the list
 */
typedef struct list_s list_t:
{    
	char *str;
	int num;
	struct list_s *next;
}list_t;


/**
 * struct passinfo - Pseudo-arguments to pass into the function,
 * A uniform prototype for function pointer structures
 * @argv: the strings generated based on the arg
 * @line_count: a line count
 * @status: returns a last command's status executed
 * @path: the current command's string path
 * @status: returns a last command's status executed
 * @arg: arguments generated by getline
 * @argc: an argument count
 * @line_count: an error count (used for error reporting)
 * @err_num: an error code for exit()
 * @linecount_flag: If on, count this line of input
 * @fname: the program filename
 * @env: environment variables (linked list) local copy
 * @history: history node (linked list for command history)
 * @alias: alias node (linked list for command aliases)
 * @environ: Custom modified copy of environ from LL env
 * @env_changed: On if environ was changed
 * @cmd_buf: if chaining commands, address of cmd_buf
 * @cmd_buf_type: CMD_type ||, &&, ; (command chaining type)
 * @readfd: a file descriptor from which line input can be read
 * @histcount: environment variables (linked list) local copy
 */


struct list_s 
{    
	char *str;
	struct list_s *next;
};

typedef struct list_s list_t:

typedef struct passinfo
{
	char **argv;
	int line_count;
	char *path;
	int status;
	char *arg;
	int argc;
	unsigned int line_count;
	int err_num;
	int linecount_flag;
	char *fname;
	char **environ;
	int env_changed;
	char **cmd_buf;
	int cmd_buf_type;
	int readfd;
	int histcount;
	list_t *env;
	list_t *history;
	list_t *alias;	

} info_t;

/**
 * struct builtin - contains a builtin the string and related function
 * @type: the builtin a command flag
 * @func: a function
 */
typedef struct builtin
{
	char *type;
	int (*func)(info_t *);
} builtin_table;

/* function prototypes */
void clear_info(info_t *info);
int interactive(info_t *info);
void _puts(char *str);
int hsh(info_t *info, char **av);
int find_builtin(info_t *info);
void find_cmd(info_t *info);
void fork_cmd(info_t *info);
void free_info(info_t *info, int free_info);
char **list_to_strings(list_t *head);
char *_getenv(info_t *info, const char *name);
char **get_environ(info_t *info);

/* Builtin command functions */
int _newexit(info_t *info);
int _newcd(info_t *info);
int _newhelp(info_t *info);
int _newenv(info_t *info);
int _newhistory(info_t *info);
int _newsetenv(info_t *info);
int _newunsetenv(info_t *info);
int _newalias(info_t *info);

/* helper_functions prototypes */
int _strlen(char *s);
char *starts_with(const char *haystack, const char *needle);
int _strcmp(char *s1, char *s2);
char *_strcat(char *dest, char *src);

/* string_to_integer functions prototypes */
int interactive(info_t *info);
int _atoi(char *s);
int is_delim(char c, char *delim);
int _isalpha(int c);

/* get_envro_functions prototypes */
char **get_environ(info_t *info);
int _unsetenv(info_t *info, char *var);
int _setenv(info_t *info, char *var, char *value);

/* print_info_error functions prototypes */
char *convert_number(long int num, int base, int flags);
void remove_comments(char *buf);
int _erratoi(char *s);
void print_error(info_t *info, char *estr);
int print_d(int input, int fd);

#endif
